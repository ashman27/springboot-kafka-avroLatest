/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.commerzbank.cobest.kafka.client.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** This object represents all events related to documents which should be provided to consumers. */
@org.apache.avro.specific.AvroGenerated
public class IncompleteDocumentEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4552683131777352058L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"IncompleteDocumentEvent\",\"namespace\":\"com.commerzbank.cobest.kafka.client.avro\",\"doc\":\"This object represents all events related to documents which should be provided to consumers.\",\"fields\":[{\"name\":\"processRunId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Request id which triggered this message.\"},{\"name\":\"eventType\",\"type\":{\"type\":\"enum\",\"name\":\"EventType\",\"symbols\":[\"DOCUMENT_CREATED\",\"DOCUMENT_DELETED\",\"DOCUMENT_UPDATED\"]},\"doc\":\"Type of operation which triggers this events.\"},{\"name\":\"metadata\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Data related to eventType represented in json format.\"},{\"name\":\"externalDocumentId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Identifier of document for which event was published\"},{\"name\":\"triggeredAt\",\"type\":\"long\",\"doc\":\"Timestamp of event on ZSL (when document was created/updated/deleted) in millis.\"},{\"name\":\"businessContext\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"This field could be used for filtering. It will contain information about which was the business reason of this event.\"},{\"name\":\"sourceSystem\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"This field could be used for filtering. It will contain from which document repository originally this event came. It could be also used for differentiate methods of metadata deserializing methods (different source could produce different input)\"},{\"name\":\"targetProduct\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"This field could be used for filtering. It will contain CoriaID of predicted target product (this value will be extracted from metadata if possible).\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<IncompleteDocumentEvent> ENCODER =
      new BinaryMessageEncoder<IncompleteDocumentEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<IncompleteDocumentEvent> DECODER =
      new BinaryMessageDecoder<IncompleteDocumentEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<IncompleteDocumentEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<IncompleteDocumentEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<IncompleteDocumentEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<IncompleteDocumentEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this IncompleteDocumentEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a IncompleteDocumentEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a IncompleteDocumentEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static IncompleteDocumentEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Request id which triggered this message. */
  @Deprecated public java.lang.String processRunId;
  /** Type of operation which triggers this events. */
  @Deprecated public com.commerzbank.cobest.kafka.client.avro.EventType eventType;
  /** Data related to eventType represented in json format. */
  @Deprecated public java.lang.String metadata;
  /** Identifier of document for which event was published */
  @Deprecated public java.lang.String externalDocumentId;
  /** Timestamp of event on ZSL (when document was created/updated/deleted) in millis. */
  @Deprecated public long triggeredAt;
  /** This field could be used for filtering. It will contain information about which was the business reason of this event. */
  @Deprecated public java.lang.String businessContext;
  /** This field could be used for filtering. It will contain from which document repository originally this event came. It could be also used for differentiate methods of metadata deserializing methods (different source could produce different input) */
  @Deprecated public java.lang.String sourceSystem;
  /** This field could be used for filtering. It will contain CoriaID of predicted target product (this value will be extracted from metadata if possible). */
  @Deprecated public java.lang.String targetProduct;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public IncompleteDocumentEvent() {}

  /**
   * All-args constructor.
   * @param processRunId Request id which triggered this message.
   * @param eventType Type of operation which triggers this events.
   * @param metadata Data related to eventType represented in json format.
   * @param externalDocumentId Identifier of document for which event was published
   * @param triggeredAt Timestamp of event on ZSL (when document was created/updated/deleted) in millis.
   * @param businessContext This field could be used for filtering. It will contain information about which was the business reason of this event.
   * @param sourceSystem This field could be used for filtering. It will contain from which document repository originally this event came. It could be also used for differentiate methods of metadata deserializing methods (different source could produce different input)
   * @param targetProduct This field could be used for filtering. It will contain CoriaID of predicted target product (this value will be extracted from metadata if possible).
   */
  public IncompleteDocumentEvent(java.lang.String processRunId, com.commerzbank.cobest.kafka.client.avro.EventType eventType, java.lang.String metadata, java.lang.String externalDocumentId, java.lang.Long triggeredAt, java.lang.String businessContext, java.lang.String sourceSystem, java.lang.String targetProduct) {
    this.processRunId = processRunId;
    this.eventType = eventType;
    this.metadata = metadata;
    this.externalDocumentId = externalDocumentId;
    this.triggeredAt = triggeredAt;
    this.businessContext = businessContext;
    this.sourceSystem = sourceSystem;
    this.targetProduct = targetProduct;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return processRunId;
    case 1: return eventType;
    case 2: return metadata;
    case 3: return externalDocumentId;
    case 4: return triggeredAt;
    case 5: return businessContext;
    case 6: return sourceSystem;
    case 7: return targetProduct;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: processRunId = (java.lang.String)value$; break;
    case 1: eventType = (com.commerzbank.cobest.kafka.client.avro.EventType)value$; break;
    case 2: metadata = (java.lang.String)value$; break;
    case 3: externalDocumentId = (java.lang.String)value$; break;
    case 4: triggeredAt = (java.lang.Long)value$; break;
    case 5: businessContext = (java.lang.String)value$; break;
    case 6: sourceSystem = (java.lang.String)value$; break;
    case 7: targetProduct = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'processRunId' field.
   * @return Request id which triggered this message.
   */
  public java.lang.String getProcessRunId() {
    return processRunId;
  }


  /**
   * Sets the value of the 'processRunId' field.
   * Request id which triggered this message.
   * @param value the value to set.
   */
  public void setProcessRunId(java.lang.String value) {
    this.processRunId = value;
  }

  /**
   * Gets the value of the 'eventType' field.
   * @return Type of operation which triggers this events.
   */
  public com.commerzbank.cobest.kafka.client.avro.EventType getEventType() {
    return eventType;
  }


  /**
   * Sets the value of the 'eventType' field.
   * Type of operation which triggers this events.
   * @param value the value to set.
   */
  public void setEventType(com.commerzbank.cobest.kafka.client.avro.EventType value) {
    this.eventType = value;
  }

  /**
   * Gets the value of the 'metadata' field.
   * @return Data related to eventType represented in json format.
   */
  public java.lang.String getMetadata() {
    return metadata;
  }


  /**
   * Sets the value of the 'metadata' field.
   * Data related to eventType represented in json format.
   * @param value the value to set.
   */
  public void setMetadata(java.lang.String value) {
    this.metadata = value;
  }

  /**
   * Gets the value of the 'externalDocumentId' field.
   * @return Identifier of document for which event was published
   */
  public java.lang.String getExternalDocumentId() {
    return externalDocumentId;
  }


  /**
   * Sets the value of the 'externalDocumentId' field.
   * Identifier of document for which event was published
   * @param value the value to set.
   */
  public void setExternalDocumentId(java.lang.String value) {
    this.externalDocumentId = value;
  }

  /**
   * Gets the value of the 'triggeredAt' field.
   * @return Timestamp of event on ZSL (when document was created/updated/deleted) in millis.
   */
  public long getTriggeredAt() {
    return triggeredAt;
  }


  /**
   * Sets the value of the 'triggeredAt' field.
   * Timestamp of event on ZSL (when document was created/updated/deleted) in millis.
   * @param value the value to set.
   */
  public void setTriggeredAt(long value) {
    this.triggeredAt = value;
  }

  /**
   * Gets the value of the 'businessContext' field.
   * @return This field could be used for filtering. It will contain information about which was the business reason of this event.
   */
  public java.lang.String getBusinessContext() {
    return businessContext;
  }


  /**
   * Sets the value of the 'businessContext' field.
   * This field could be used for filtering. It will contain information about which was the business reason of this event.
   * @param value the value to set.
   */
  public void setBusinessContext(java.lang.String value) {
    this.businessContext = value;
  }

  /**
   * Gets the value of the 'sourceSystem' field.
   * @return This field could be used for filtering. It will contain from which document repository originally this event came. It could be also used for differentiate methods of metadata deserializing methods (different source could produce different input)
   */
  public java.lang.String getSourceSystem() {
    return sourceSystem;
  }


  /**
   * Sets the value of the 'sourceSystem' field.
   * This field could be used for filtering. It will contain from which document repository originally this event came. It could be also used for differentiate methods of metadata deserializing methods (different source could produce different input)
   * @param value the value to set.
   */
  public void setSourceSystem(java.lang.String value) {
    this.sourceSystem = value;
  }

  /**
   * Gets the value of the 'targetProduct' field.
   * @return This field could be used for filtering. It will contain CoriaID of predicted target product (this value will be extracted from metadata if possible).
   */
  public java.lang.String getTargetProduct() {
    return targetProduct;
  }


  /**
   * Sets the value of the 'targetProduct' field.
   * This field could be used for filtering. It will contain CoriaID of predicted target product (this value will be extracted from metadata if possible).
   * @param value the value to set.
   */
  public void setTargetProduct(java.lang.String value) {
    this.targetProduct = value;
  }

  /**
   * Creates a new IncompleteDocumentEvent RecordBuilder.
   * @return A new IncompleteDocumentEvent RecordBuilder
   */
  public static com.commerzbank.cobest.kafka.client.avro.IncompleteDocumentEvent.Builder newBuilder() {
    return new com.commerzbank.cobest.kafka.client.avro.IncompleteDocumentEvent.Builder();
  }

  /**
   * Creates a new IncompleteDocumentEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new IncompleteDocumentEvent RecordBuilder
   */
  public static com.commerzbank.cobest.kafka.client.avro.IncompleteDocumentEvent.Builder newBuilder(com.commerzbank.cobest.kafka.client.avro.IncompleteDocumentEvent.Builder other) {
    if (other == null) {
      return new com.commerzbank.cobest.kafka.client.avro.IncompleteDocumentEvent.Builder();
    } else {
      return new com.commerzbank.cobest.kafka.client.avro.IncompleteDocumentEvent.Builder(other);
    }
  }

  /**
   * Creates a new IncompleteDocumentEvent RecordBuilder by copying an existing IncompleteDocumentEvent instance.
   * @param other The existing instance to copy.
   * @return A new IncompleteDocumentEvent RecordBuilder
   */
  public static com.commerzbank.cobest.kafka.client.avro.IncompleteDocumentEvent.Builder newBuilder(com.commerzbank.cobest.kafka.client.avro.IncompleteDocumentEvent other) {
    if (other == null) {
      return new com.commerzbank.cobest.kafka.client.avro.IncompleteDocumentEvent.Builder();
    } else {
      return new com.commerzbank.cobest.kafka.client.avro.IncompleteDocumentEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for IncompleteDocumentEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<IncompleteDocumentEvent>
    implements org.apache.avro.data.RecordBuilder<IncompleteDocumentEvent> {

    /** Request id which triggered this message. */
    private java.lang.String processRunId;
    /** Type of operation which triggers this events. */
    private com.commerzbank.cobest.kafka.client.avro.EventType eventType;
    /** Data related to eventType represented in json format. */
    private java.lang.String metadata;
    /** Identifier of document for which event was published */
    private java.lang.String externalDocumentId;
    /** Timestamp of event on ZSL (when document was created/updated/deleted) in millis. */
    private long triggeredAt;
    /** This field could be used for filtering. It will contain information about which was the business reason of this event. */
    private java.lang.String businessContext;
    /** This field could be used for filtering. It will contain from which document repository originally this event came. It could be also used for differentiate methods of metadata deserializing methods (different source could produce different input) */
    private java.lang.String sourceSystem;
    /** This field could be used for filtering. It will contain CoriaID of predicted target product (this value will be extracted from metadata if possible). */
    private java.lang.String targetProduct;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.commerzbank.cobest.kafka.client.avro.IncompleteDocumentEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.processRunId)) {
        this.processRunId = data().deepCopy(fields()[0].schema(), other.processRunId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.eventType)) {
        this.eventType = data().deepCopy(fields()[1].schema(), other.eventType);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.metadata)) {
        this.metadata = data().deepCopy(fields()[2].schema(), other.metadata);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.externalDocumentId)) {
        this.externalDocumentId = data().deepCopy(fields()[3].schema(), other.externalDocumentId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.triggeredAt)) {
        this.triggeredAt = data().deepCopy(fields()[4].schema(), other.triggeredAt);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.businessContext)) {
        this.businessContext = data().deepCopy(fields()[5].schema(), other.businessContext);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.sourceSystem)) {
        this.sourceSystem = data().deepCopy(fields()[6].schema(), other.sourceSystem);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.targetProduct)) {
        this.targetProduct = data().deepCopy(fields()[7].schema(), other.targetProduct);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing IncompleteDocumentEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.commerzbank.cobest.kafka.client.avro.IncompleteDocumentEvent other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.processRunId)) {
        this.processRunId = data().deepCopy(fields()[0].schema(), other.processRunId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.eventType)) {
        this.eventType = data().deepCopy(fields()[1].schema(), other.eventType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.metadata)) {
        this.metadata = data().deepCopy(fields()[2].schema(), other.metadata);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.externalDocumentId)) {
        this.externalDocumentId = data().deepCopy(fields()[3].schema(), other.externalDocumentId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.triggeredAt)) {
        this.triggeredAt = data().deepCopy(fields()[4].schema(), other.triggeredAt);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.businessContext)) {
        this.businessContext = data().deepCopy(fields()[5].schema(), other.businessContext);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.sourceSystem)) {
        this.sourceSystem = data().deepCopy(fields()[6].schema(), other.sourceSystem);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.targetProduct)) {
        this.targetProduct = data().deepCopy(fields()[7].schema(), other.targetProduct);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'processRunId' field.
      * Request id which triggered this message.
      * @return The value.
      */
    public java.lang.String getProcessRunId() {
      return processRunId;
    }


    /**
      * Sets the value of the 'processRunId' field.
      * Request id which triggered this message.
      * @param value The value of 'processRunId'.
      * @return This builder.
      */
    public com.commerzbank.cobest.kafka.client.avro.IncompleteDocumentEvent.Builder setProcessRunId(java.lang.String value) {
      validate(fields()[0], value);
      this.processRunId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'processRunId' field has been set.
      * Request id which triggered this message.
      * @return True if the 'processRunId' field has been set, false otherwise.
      */
    public boolean hasProcessRunId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'processRunId' field.
      * Request id which triggered this message.
      * @return This builder.
      */
    public com.commerzbank.cobest.kafka.client.avro.IncompleteDocumentEvent.Builder clearProcessRunId() {
      processRunId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventType' field.
      * Type of operation which triggers this events.
      * @return The value.
      */
    public com.commerzbank.cobest.kafka.client.avro.EventType getEventType() {
      return eventType;
    }


    /**
      * Sets the value of the 'eventType' field.
      * Type of operation which triggers this events.
      * @param value The value of 'eventType'.
      * @return This builder.
      */
    public com.commerzbank.cobest.kafka.client.avro.IncompleteDocumentEvent.Builder setEventType(com.commerzbank.cobest.kafka.client.avro.EventType value) {
      validate(fields()[1], value);
      this.eventType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'eventType' field has been set.
      * Type of operation which triggers this events.
      * @return True if the 'eventType' field has been set, false otherwise.
      */
    public boolean hasEventType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'eventType' field.
      * Type of operation which triggers this events.
      * @return This builder.
      */
    public com.commerzbank.cobest.kafka.client.avro.IncompleteDocumentEvent.Builder clearEventType() {
      eventType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'metadata' field.
      * Data related to eventType represented in json format.
      * @return The value.
      */
    public java.lang.String getMetadata() {
      return metadata;
    }


    /**
      * Sets the value of the 'metadata' field.
      * Data related to eventType represented in json format.
      * @param value The value of 'metadata'.
      * @return This builder.
      */
    public com.commerzbank.cobest.kafka.client.avro.IncompleteDocumentEvent.Builder setMetadata(java.lang.String value) {
      validate(fields()[2], value);
      this.metadata = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'metadata' field has been set.
      * Data related to eventType represented in json format.
      * @return True if the 'metadata' field has been set, false otherwise.
      */
    public boolean hasMetadata() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'metadata' field.
      * Data related to eventType represented in json format.
      * @return This builder.
      */
    public com.commerzbank.cobest.kafka.client.avro.IncompleteDocumentEvent.Builder clearMetadata() {
      metadata = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'externalDocumentId' field.
      * Identifier of document for which event was published
      * @return The value.
      */
    public java.lang.String getExternalDocumentId() {
      return externalDocumentId;
    }


    /**
      * Sets the value of the 'externalDocumentId' field.
      * Identifier of document for which event was published
      * @param value The value of 'externalDocumentId'.
      * @return This builder.
      */
    public com.commerzbank.cobest.kafka.client.avro.IncompleteDocumentEvent.Builder setExternalDocumentId(java.lang.String value) {
      validate(fields()[3], value);
      this.externalDocumentId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'externalDocumentId' field has been set.
      * Identifier of document for which event was published
      * @return True if the 'externalDocumentId' field has been set, false otherwise.
      */
    public boolean hasExternalDocumentId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'externalDocumentId' field.
      * Identifier of document for which event was published
      * @return This builder.
      */
    public com.commerzbank.cobest.kafka.client.avro.IncompleteDocumentEvent.Builder clearExternalDocumentId() {
      externalDocumentId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'triggeredAt' field.
      * Timestamp of event on ZSL (when document was created/updated/deleted) in millis.
      * @return The value.
      */
    public long getTriggeredAt() {
      return triggeredAt;
    }


    /**
      * Sets the value of the 'triggeredAt' field.
      * Timestamp of event on ZSL (when document was created/updated/deleted) in millis.
      * @param value The value of 'triggeredAt'.
      * @return This builder.
      */
    public com.commerzbank.cobest.kafka.client.avro.IncompleteDocumentEvent.Builder setTriggeredAt(long value) {
      validate(fields()[4], value);
      this.triggeredAt = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'triggeredAt' field has been set.
      * Timestamp of event on ZSL (when document was created/updated/deleted) in millis.
      * @return True if the 'triggeredAt' field has been set, false otherwise.
      */
    public boolean hasTriggeredAt() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'triggeredAt' field.
      * Timestamp of event on ZSL (when document was created/updated/deleted) in millis.
      * @return This builder.
      */
    public com.commerzbank.cobest.kafka.client.avro.IncompleteDocumentEvent.Builder clearTriggeredAt() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'businessContext' field.
      * This field could be used for filtering. It will contain information about which was the business reason of this event.
      * @return The value.
      */
    public java.lang.String getBusinessContext() {
      return businessContext;
    }


    /**
      * Sets the value of the 'businessContext' field.
      * This field could be used for filtering. It will contain information about which was the business reason of this event.
      * @param value The value of 'businessContext'.
      * @return This builder.
      */
    public com.commerzbank.cobest.kafka.client.avro.IncompleteDocumentEvent.Builder setBusinessContext(java.lang.String value) {
      validate(fields()[5], value);
      this.businessContext = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'businessContext' field has been set.
      * This field could be used for filtering. It will contain information about which was the business reason of this event.
      * @return True if the 'businessContext' field has been set, false otherwise.
      */
    public boolean hasBusinessContext() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'businessContext' field.
      * This field could be used for filtering. It will contain information about which was the business reason of this event.
      * @return This builder.
      */
    public com.commerzbank.cobest.kafka.client.avro.IncompleteDocumentEvent.Builder clearBusinessContext() {
      businessContext = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'sourceSystem' field.
      * This field could be used for filtering. It will contain from which document repository originally this event came. It could be also used for differentiate methods of metadata deserializing methods (different source could produce different input)
      * @return The value.
      */
    public java.lang.String getSourceSystem() {
      return sourceSystem;
    }


    /**
      * Sets the value of the 'sourceSystem' field.
      * This field could be used for filtering. It will contain from which document repository originally this event came. It could be also used for differentiate methods of metadata deserializing methods (different source could produce different input)
      * @param value The value of 'sourceSystem'.
      * @return This builder.
      */
    public com.commerzbank.cobest.kafka.client.avro.IncompleteDocumentEvent.Builder setSourceSystem(java.lang.String value) {
      validate(fields()[6], value);
      this.sourceSystem = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'sourceSystem' field has been set.
      * This field could be used for filtering. It will contain from which document repository originally this event came. It could be also used for differentiate methods of metadata deserializing methods (different source could produce different input)
      * @return True if the 'sourceSystem' field has been set, false otherwise.
      */
    public boolean hasSourceSystem() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'sourceSystem' field.
      * This field could be used for filtering. It will contain from which document repository originally this event came. It could be also used for differentiate methods of metadata deserializing methods (different source could produce different input)
      * @return This builder.
      */
    public com.commerzbank.cobest.kafka.client.avro.IncompleteDocumentEvent.Builder clearSourceSystem() {
      sourceSystem = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'targetProduct' field.
      * This field could be used for filtering. It will contain CoriaID of predicted target product (this value will be extracted from metadata if possible).
      * @return The value.
      */
    public java.lang.String getTargetProduct() {
      return targetProduct;
    }


    /**
      * Sets the value of the 'targetProduct' field.
      * This field could be used for filtering. It will contain CoriaID of predicted target product (this value will be extracted from metadata if possible).
      * @param value The value of 'targetProduct'.
      * @return This builder.
      */
    public com.commerzbank.cobest.kafka.client.avro.IncompleteDocumentEvent.Builder setTargetProduct(java.lang.String value) {
      validate(fields()[7], value);
      this.targetProduct = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'targetProduct' field has been set.
      * This field could be used for filtering. It will contain CoriaID of predicted target product (this value will be extracted from metadata if possible).
      * @return True if the 'targetProduct' field has been set, false otherwise.
      */
    public boolean hasTargetProduct() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'targetProduct' field.
      * This field could be used for filtering. It will contain CoriaID of predicted target product (this value will be extracted from metadata if possible).
      * @return This builder.
      */
    public com.commerzbank.cobest.kafka.client.avro.IncompleteDocumentEvent.Builder clearTargetProduct() {
      targetProduct = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public IncompleteDocumentEvent build() {
      try {
        IncompleteDocumentEvent record = new IncompleteDocumentEvent();
        record.processRunId = fieldSetFlags()[0] ? this.processRunId : (java.lang.String) defaultValue(fields()[0]);
        record.eventType = fieldSetFlags()[1] ? this.eventType : (com.commerzbank.cobest.kafka.client.avro.EventType) defaultValue(fields()[1]);
        record.metadata = fieldSetFlags()[2] ? this.metadata : (java.lang.String) defaultValue(fields()[2]);
        record.externalDocumentId = fieldSetFlags()[3] ? this.externalDocumentId : (java.lang.String) defaultValue(fields()[3]);
        record.triggeredAt = fieldSetFlags()[4] ? this.triggeredAt : (java.lang.Long) defaultValue(fields()[4]);
        record.businessContext = fieldSetFlags()[5] ? this.businessContext : (java.lang.String) defaultValue(fields()[5]);
        record.sourceSystem = fieldSetFlags()[6] ? this.sourceSystem : (java.lang.String) defaultValue(fields()[6]);
        record.targetProduct = fieldSetFlags()[7] ? this.targetProduct : (java.lang.String) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<IncompleteDocumentEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<IncompleteDocumentEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<IncompleteDocumentEvent>
    READER$ = (org.apache.avro.io.DatumReader<IncompleteDocumentEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.processRunId);

    out.writeEnum(this.eventType.ordinal());

    out.writeString(this.metadata);

    out.writeString(this.externalDocumentId);

    out.writeLong(this.triggeredAt);

    out.writeString(this.businessContext);

    out.writeString(this.sourceSystem);

    out.writeString(this.targetProduct);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.processRunId = in.readString();

      this.eventType = com.commerzbank.cobest.kafka.client.avro.EventType.values()[in.readEnum()];

      this.metadata = in.readString();

      this.externalDocumentId = in.readString();

      this.triggeredAt = in.readLong();

      this.businessContext = in.readString();

      this.sourceSystem = in.readString();

      this.targetProduct = in.readString();

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.processRunId = in.readString();
          break;

        case 1:
          this.eventType = com.commerzbank.cobest.kafka.client.avro.EventType.values()[in.readEnum()];
          break;

        case 2:
          this.metadata = in.readString();
          break;

        case 3:
          this.externalDocumentId = in.readString();
          break;

        case 4:
          this.triggeredAt = in.readLong();
          break;

        case 5:
          this.businessContext = in.readString();
          break;

        case 6:
          this.sourceSystem = in.readString();
          break;

        case 7:
          this.targetProduct = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










